diff --git a/third_party/gpus/crosstool/CROSSTOOL b/third_party/gpus/crosstool/CROSSTOOL
index 8db81a9..f362b25 100644
--- a/third_party/gpus/crosstool/CROSSTOOL
+++ b/third_party/gpus/crosstool/CROSSTOOL
@@ -57,9 +57,13 @@ toolchain {
   # used by gcc. That works because bazel currently doesn't track files at
   # absolute locations and has no remote execution, yet. However, this will need
   # to be fixed, maybe with auto-detection?
-  cxx_builtin_include_directory: "/usr/lib/gcc/"
-  cxx_builtin_include_directory: "/usr/local/include"
+  #  cxx_builtin_include_directory: "/usr/lib/gcc/"
+  #cxx_builtin_include_directory: "/usr/local/include"
   cxx_builtin_include_directory: "/usr/include"
+  cxx_builtin_include_directory: "/opt/gcc/4.9.3/snos/include/"
+  cxx_builtin_include_directory: "/opt/gcc/4.9.3/snos/lib/gcc/x86_64-suse-linux/4.9.3/include-fixed/"
+  cxx_builtin_include_directory: "/opt/gcc/4.9.3/snos/lib/gcc/x86_64-suse-linux/4.9.3/include/"
+  cxx_builtin_include_directory: "/opt/nvidia/cudatoolkit7.0/7.0.28-1.0502.10742.5.1/include/"
   tool_path { name: "gcov" path: "/usr/bin/gcov" }
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
@@ -120,6 +124,8 @@ toolchain {
   # Gold linker only? Can we enable this by default?
   # linker_flag: "-Wl,--warn-execstack"
   # linker_flag: "-Wl,--detect-odr-violations"
+  linker_flag: "-Wl,-rpath,/opt/gcc/4.9.3/snos/lib64/"
+  linker_flag: "-Wl,-rpath,/apps/daint/UES/5.2.UP04/sandbox-ds/tensorflow/easybuild/software/PCRE/8.38-CrayGNU-2016.03/lib"
 
   compilation_mode_flags {
     mode: DBG
@@ -165,7 +171,7 @@ toolchain {
 
   tool_path { name: "ar" path: "/usr/bin/libtool" }
   tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
+  tool_path { name: "cpp" path: "/opt/gcc/4.9.3/bin/cpp" }
   tool_path { name: "dwp" path: "/usr/bin/dwp" }
   tool_path { name: "gcc" path: "clang/bin/crosstool_wrapper_driver_is_not_gcc" }
   cxx_flag: "-std=c++11"
@@ -178,7 +184,7 @@ toolchain {
   # TODO(ulfjack): This is wrong on so many levels. Figure out a way to auto-detect the proper
   # setting from the local compiler, and also how to make incremental builds correct.
   cxx_builtin_include_directory: "/"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  tool_path { name: "gcov" path: "/opt/gcc/4.9.3/bin/gcov" }
   tool_path { name: "ld" path: "/usr/bin/ld" }
   tool_path { name: "nm" path: "/usr/bin/nm" }
   tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
